# install swift
---
- name: install sudo
  yum: name={{item}} state=installed
  with_items:
    - sudo
  when: ansible_os_family == 'RedHat'

- name: Create etc swift
  file:
    path: /etc/swift
    state: directory
    mode: 0755
    owner: swift
    group: swift
  register: etcswiftcreated

- name: Create swift config files
  register: swiftconfigscreated
  when: etcswiftcreated|success and not tiny_install
  copy:
    src: /home/swift/code/swift/doc/saio/swift/
    dest: /etc/swift/
    owner: swift
    group: swift

- name: Create tiny swift config files
  register: swiftconfigscreated
  when: etcswiftcreated|success and tiny_install
  copy:
    src: single_replica_policy/etc/swift/
    dest: /etc/swift/
    owner: swift
    group: swift

- name: Create swift test config file
  when: etcswiftcreated|success and not tiny_install
  copy:
    src: /home/swift/code/swift/test/sample.conf
    dest: /etc/swift/test.conf
    owner: swift
    group: swift

- name: list of the .conf files and store it in register
  raw: find /etc/swift -type f -name "*.conf"
  register: swift_conf_files
  when: swiftconfigscreated|success and not tiny_install

- name: Set swift user in configs
  register: configsed
  when: swift_conf_files|success and not tiny_install
  with_items: "{{ swift_conf_files.stdout_lines }}"
  replace:
    dest: "{{ item }}"
    regexp: user = <your-user-name>
    replace: user = swift

- name: Move SAIO bin scripts
  register: bin_scripts
  when: etcswiftcreated|success
  copy:
    src: /home/swift/code/swift/doc/saio/bin/
    dest: /home/swift/bin
    owner: swift
    group: swift
    mode: 0775

- name: Copy modified remakerings
  when: not tiny_install
  copy:
    src: remakerings
    dest: /home/swift/bin/remakerings
    owner: swift
    group: swift
    mode: 0775

- name: Copy modified remakerings for tiny
  when: tiny_install
  copy:
    src: single_replica_policy/remakerings
    dest: /home/swift/bin/remakerings
    owner: swift
    group: swift
    mode: 0775

- name: Add bin to PATH
  copy:
    src: path_home_bin.sh
    dest: /etc/profile.d
    owner: root
    group: root

- name: Set up rsync on boot (Debian)
  register: rsyncsetup
  replace:
    dest: /etc/default/rsync
    regexp: RSYNC_ENABLE=false
    replace: RSYNC_ENABLE=true
  when: ansible_os_family == 'Debian' and not tiny_install

- name: Create /etc/default/rsyncd file (RedHat)
  copy:
    src: etc/default/rsyncd
    dest: /etc/default/rsyncd
    force: no
  when: ansible_os_family == 'RedHat' and not tiny_install

- name: Set up rsync on boot (RedHat)
  register: rsyncsetup
  replace:
    dest: /etc/default/rsyncd
    regexp: RSYNC_ENABLE=false
    replace: RSYNC_ENABLE=true
  when: ansible_os_family == 'RedHat' and not tiny_install

- name: rsync config file
  when: not tiny_install
  copy:
    src: /home/swift/code/swift/doc/saio/rsyncd.conf
    dest: /etc/rsyncd.conf

- name: set swift user in rsync config
  when: not tiny_install
  replace:
    dest: /etc/rsyncd.conf
    regexp: user = <your-user-name>
    replace: user = swift

- name: start rsync (Debian)
  service:
    name: rsync
    state: restarted
  when: ansible_os_family == 'Debian' and not tiny_install

- name: start rsyncd (RedHat)
  systemd:
    name: rsyncd
    state: restarted
    daemon_reload: yes
    enabled: yes
  when: ansible_os_family == 'RedHat' and not tiny_install

- include: setup_swift_logging.yaml

- include: install_libec.yaml

- name: install dependencies
  register: swiftdependenciesinstalled
  apt: name={{item}} state=installed
  with_items:
    - curl
    - gcc
    - memcached
    # - rsync
    - sqlite3
    # - xfsprogs
    # - git-core
    # - libffi-dev
    # - python-setuptools
    # - libssl-dev
    # - python-coverage
    # - python-dev
    # - python-nose
    # - python-xattr
    # - python-eventlet
    # - python-greenlet
    # - python-pastedeploy
    # - python-netifaces
    # - python-pip
    # - python-dnspython
    # mock should be installed with pip instead. apt version is too old
    # - python-mock
  when: ansible_os_family == 'Debian'

- name: install dependencies
  register: swiftdependenciesinstalled
  yum: name={{item}} state=installed
  with_items:
    - curl
    - gcc
    - memcached
    - sqlite
  when: ansible_os_family == 'RedHat'

- name: update pip
  pip:
    name: pip
    state: latest

- name: update setuptools
  pip:
    name: setuptools
    state: latest

- name: install pip dependencies
  pip:
    requirements: "{{item}}"
    chdir: /home/swift/code/swift
  with_items:
    - requirements.txt
    - test-requirements.txt

- name: Install swift
  register: swiftinstalled
  when: swiftdependenciesinstalled|success and libec_installed|success
  command: /usr/bin/python ./setup.py develop
  args:
    chdir: /home/swift/code/swift
  become_user: swift

- name: Build rings
  when: swiftinstalled|success
  register: ringssetup
  command: ./remakerings
  args:
    chdir: /home/swift/bin/

- name: Set /etc/swift permissions
  file:
    group: swift
    owner: swift
    path: /etc/swift/
    recurse: yes
    state: directory

- name: Start Swift
  when: tiny_install
  command: ./swift-init main start && ./swift-init container-updater start
  args:
    chdir: /home/swift/code/swift/bin
